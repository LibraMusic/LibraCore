name: Release

on:
  workflow_run:
    workflows: [Test]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare for nightly release
        run: |
          # Delete any existing "-nightly" tag on the remote and locally
          NIGHTLY_TAG=$(git ls-remote --tags origin | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+-nightly' | sort -V | tail -n 1)
          if [ -n "$NIGHTLY_TAG" ]; then
            echo "Found existing nightly tag: $NIGHTLY_TAG. Deleting it..."
            git push origin --delete "$NIGHTLY_TAG"
            git tag -d "$NIGHTLY_TAG"

            sleep 5

            # Use GitHub REST API to find releases matching the nightly tag
            RELEASE_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              | jq -r ".[] | select(.tag_name == \"$NIGHTLY_TAG\" and .draft == true) | .id")

            if [ -n "$RELEASE_IDS" ]; then
              echo "Found draft releases associated with tag: $NIGHTLY_TAG"
              echo "$RELEASE_IDS" | while read -r RELEASE_ID; do
                echo "Deleting draft release with ID: $RELEASE_ID"
                curl -X DELETE -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github+json" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
              done
            else
              echo "No draft releases found for tag: $NIGHTLY_TAG"
            fi
            echo ""
          else
            echo "No existing nightly tag found."
          fi

          # Find the latest version tag
          LATEST_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z]+[0-9]*)?$' | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.1.0-DEV"
          fi
          echo "Latest version tag is $LATEST_TAG"

          # Remove any suffix if it exists (like "-beta1" or "-rc2")
          BASE_TAG=$(echo "$LATEST_TAG" | sed 's/-[a-zA-Z0-9]*$//')
          echo "Base version tag after removing suffix is $BASE_TAG"

          # If the tag had a suffix, use the base tag without incrementing the patch
          # Otherwise, increment the patch version
          if [ "$BASE_TAG" != "$LATEST_TAG" ]; then
            NEW_TAG="${BASE_TAG}-nightly"
          else
            IFS='.' read -r major minor patch <<< "${BASE_TAG#v}"
            NEW_TAG="v$major.$minor.$((patch + 1))-nightly"
          fi
          echo "New nightly tag will be $NEW_TAG"

          # Create and push the new nightly tag
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

          echo "IS_NIGHTLY_BUILD=1" >> $GITHUB_ENV
          echo "NIGHTLY_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "GORELEASER_CURRENT_TAG=$NEW_TAG" >> $GITHUB_ENV
        if: ${{ github.ref_type != 'tag' || endsWith(github.ref, '-nightly') }}

      - name: Prepare for non-nightly release
        run: |
          # Find the latest nightly tag
          NIGHTLY_TAG=$(git ls-remote --tags origin | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+-nightly' | sort -V | tail -n 1)

          # If no nightly tag is found, throw an error
          if [ -z "$NIGHTLY_TAG" ]; then
            echo "::error ::No nightly tag found"
            exit 1
          fi
          echo "Found nightly tag: $NIGHTLY_TAG"

          # Save the NIGHTLY_TAG to the environment
          echo "NIGHTLY_TAG=$NIGHTLY_TAG" >> $GITHUB_ENV
        if: ${{ github.ref_type == 'tag' && !endsWith(github.ref, '-nightly') }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: ~> v2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: libra
          path: dist/*
